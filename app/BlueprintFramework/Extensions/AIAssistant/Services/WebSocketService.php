<?php

namespace Blueprint\Extensions\AIAssistant\Services;

class WebSocketService
{    protected $clients;    protected $aiService;    protected $metricsService;    protected $security;    public function __construct($aiService, $metricsService, $security)    {        $this->clients = new \SplObjectStorage;        $this->aiService = $aiService;        $this->metricsService = $metricsService;        $this->security = $security;    }    public function onOpen($conn)    {        $this->clients->attach($conn);    }    public function onMessage($from, $msg)    {        $data = json_decode($msg, true);                if (!$data || !isset($data['type'])) {            return;        }        switch ($data['type']) {            case 'chat_message':                return $this->handleChatMessage($from, $data);            case 'admin_query':                return $this->handleAdminQuery($from, $data);            case 'metrics_request':                return $this->handleMetricsRequest($from, $data);        }    }    public function onClose($conn)    {        $this->clients->detach($conn);    }    public function onError($conn, $e)    {        $conn->close();    }    protected function handleChatMessage($from, array $data)    {        $response = $this->aiService->processUserQuery($data['message'] ?? '', [            'user_id' => $data['user_id'] ?? null,            'server_id' => $data['server_id'] ?? null        ]);        return $response;    }    protected function handleAdminQuery($from, array $data)    {        $response = $this->aiService->processUserQuery($data['query'] ?? '', [            'user_id' => $data['user_id'] ?? null,            'server_id' => $data['server_id'] ?? null,            'admin' => true        ]);        return $response;    }    protected function handleMetricsRequest($from, array $data)    {        $metrics = $this->metricsService->getServerMetrics($data['server_id'] ?? null);        return $metrics;    }    public function hasConnection($connectionId)    {        foreach ($this->clients as $client) {            if ($client->connectionId === $connectionId) {                return true;            }        }        return false;    }}